{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Prerequisites"
                    },
                    "Parameters": [
                        "IsCloudTrailEnabled"
                    ]
                }
            ],
            "ParameterLabels": {
                "IsCloudTrailEnabled": {
                    "default": "Is CloudTrail already enabled in this region? CloudTrail is a requirement for Cloudwatch Events. If not enabled, please enable CloudTrail before proceeding."
                }
            }
        },
        "AWS::CloudFormation::Designer": {
            "a509ac2d-6413-4070-be9b-da168672b83c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "7a00f01c-6d0a-4aea-acc8-794cb4ce6707": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "a509ac2d-6413-4070-be9b-da168672b83c"
                ]
            },
            "0b1fd888-f1b4-41bf-af6d-98c904d068ad": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "references": [
                    "7a00f01c-6d0a-4aea-acc8-794cb4ce6707"
                ]
            },
            "36596ef1-1413-4277-ade2-c1e932c89d8b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "0b1fd888-f1b4-41bf-af6d-98c904d068ad"
                ],
                "references": [
                    "7a00f01c-6d0a-4aea-acc8-794cb4ce6707"
                ]
            },
            "31d4138e-e3a7-44c2-b1a3-459e86b39f7e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "36596ef1-1413-4277-ade2-c1e932c89d8b"
                ]
            },
            "2848b5a7-ac4b-434c-991b-5d68aa59a590": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "36596ef1-1413-4277-ade2-c1e932c89d8b"
                ],
                "isrelatedto": [
                    "36596ef1-1413-4277-ade2-c1e932c89d8b",
                    "31d4138e-e3a7-44c2-b1a3-459e86b39f7e"
                ]
            }
        }
    },
    "Parameters": {
        "IsCloudTrailEnabled": {
            "Description": "Specify if CloudTrail is enabled in the current region",
            "Type": "String",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        }
    },
    "Conditions": {
        "CreateResources": {
            "Fn::Equals": [
                {
                    "Ref": "IsCloudTrailEnabled"
                },
                "Yes"
            ]
        }
    },
    "Resources": {
        "EC2EventRule": {
            "Type": "AWS::Events::Rule",
            "Condition": "CreateResources",
            "Properties": {
                "Description": "Trigger a Lambda function anytime a new EC2 resource is created (EC2 instance, EBS volume, EBS Snapshot or AMI)",
                "EventPattern": {
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail": {
                        "eventSource": [
                            "ec2.amazonaws.com"
                        ],
                        "eventName": [
                            "CreateVolume",
                            "RunInstances",
                            "CreateImage",
                            "CreateSnapshot"
                        ]
                    }
                },
                "Name": "New-EC2Resource-Event",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Ref": "ProductionAlias"
                        },
                        "Id": "Production"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "31d4138e-e3a7-44c2-b1a3-459e86b39f7e"
                }
            }
        },
        "CFAutoTag": {
            "Type": "AWS::Lambda::Function",
            "Condition": "CreateResources",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "from __future__ import print_function",
                                "import json",
                                "import boto3",
                                "import logging",
                                "import time",
                                "import datetime",
                                "",
                                "logger = logging.getLogger()",
                                "logger.setLevel(logging.INFO)",
                                "",
                                "def lambda_handler(event, context):",
                                "    #logger.info('Event: ' + str(event))",
                                "    #print('Received event: ' + json.dumps(event, indent=2))",
                                "",
                                "    ids = []",
                                "",
                                "    try:",
                                "        region = event['region']",
                                "        detail = event['detail']",
                                "        eventname = detail['eventName']",
                                "        arn = detail['userIdentity']['arn']",
                                "        principal = detail['userIdentity']['principalId']",
                                "        userType = detail['userIdentity']['type']",
                                "",
                                "        if userType == 'IAMUser':",
                                "            user = detail['userIdentity']['userName']",
                                "",
                                "        else:",
                                "            user = principal.split(':')[1]",
                                "",
                                "",
                                "        logger.info('principalId: ' + str(principal))",
                                "        logger.info('region: ' + str(region))",
                                "        logger.info('eventName: ' + str(eventname))",
                                "        logger.info('detail: ' + str(detail))",
                                "",
                                "        if not detail['responseElements']:",
                                "            logger.warning('Not responseElements found')",
                                "            if detail['errorCode']:",
                                "                logger.error('errorCode: ' + detail['errorCode'])",
                                "            if detail['errorMessage']:",
                                "                logger.error('errorMessage: ' + detail['errorMessage'])",
                                "            return False",
                                "",
                                "        ec2 = boto3.resource('ec2')",
                                "",
                                "        if eventname == 'CreateVolume':",
                                "            ids.append(detail['responseElements']['volumeId'])",
                                "            logger.info(ids)",
                                "",
                                "        elif eventname == 'RunInstances':",
                                "            items = detail['responseElements']['instancesSet']['items']",
                                "            for item in items:",
                                "                ids.append(item['instanceId'])",
                                "            logger.info(ids)",
                                "            logger.info('number of instances: ' + str(len(ids)))",
                                "",
                                "            base = ec2.instances.filter(InstanceIds=ids)",
                                "",
                                "            #loop through the instances",
                                "            for instance in base:",
                                "                for vol in instance.volumes.all():",
                                "                    ids.append(vol.id)",
                                "                for eni in instance.network_interfaces:",
                                "                    ids.append(eni.id)",
                                "",
                                "        elif eventname == 'CreateImage':",
                                "            ids.append(detail['responseElements']['imageId'])",
                                "            logger.info(ids)",
                                "",
                                "        elif eventname == 'CreateSnapshot':",
                                "            ids.append(detail['responseElements']['snapshotId'])",
                                "            logger.info(ids)",
                                "        else:",
                                "            logger.warning('Not supported action')",
                                "",
                                "        if ids:",
                                "            for resourceid in ids:",
                                "                print('Tagging resource ' + resourceid)",
                                "            ec2.create_tags(Resources=ids, Tags=[{'Key': 'CreatorNetID', 'Value': user})",
                                "",
                                "        logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\\n')",
                                "        return True",
                                "    except Exception as e:",
                                "        logger.error('Something went wrong: ' + str(e))",
                                "        return False"
                            ]
                        ]
                    }
                },
                "Description": "This function tags EC2 Resources in response to Cloudwatch Events.",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaAutoTagRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "60"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7a00f01c-6d0a-4aea-acc8-794cb4ce6707"
                }
            }
        },
        "StableVersion": {
            "Type": "AWS::Lambda::Version",
            "Condition": "CreateResources",
            "Properties": {
                "FunctionName": {
                    "Ref": "CFAutoTag"
                },
                "Description": "Stable version"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0b1fd888-f1b4-41bf-af6d-98c904d068ad"
                }
            }
        },
        "ProductionAlias": {
            "Type": "AWS::Lambda::Alias",
            "Condition": "CreateResources",
            "Properties": {
                "FunctionName": {
                    "Ref": "CFAutoTag"
                },
                "FunctionVersion": {
                    "Fn::GetAtt": [
                        "StableVersion",
                        "Version"
                    ]
                },
                "Name": "PROD"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "36596ef1-1413-4277-ade2-c1e932c89d8b"
                }
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "ProductionAlias"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "EC2EventRule",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2848b5a7-ac4b-434c-991b-5d68aa59a590"
                }
            }
        },
        "LambdaAutoTagRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateResources",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "LambdaGetLatestWindowsAmiIdPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1458923097000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudtrail:LookupEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "Stmt1458923121000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:Describe*",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a509ac2d-6413-4070-be9b-da168672b83c"
                }
            }
        }
    },
    "Outputs": {}
}